/**
* BS create this testclass for Opportunity_Insert_UniqueId_Handler class
*/
@isTest
public class Opportunity_Insert_UniqueId_Handler_Test {
    
    @isTest 
    static void testInsertUniqueIdMethod() {
        // Create test data
        List<Opportunity> testOpps = new List<Opportunity>();
        
        Opportunity opp1 = new Opportunity(Name = 'Test Opp 1',StageName='Closed-Won', Unique_Id__c = 'DL-2023.003',CloseDate= System.today()+10);
        testOpps.add(opp1);
        
        Opportunity opp2 = new Opportunity(Name = 'Test Opp 2',StageName='Prospecting', CloseDate= System.today()+20);
        opp2.Manually_Filled_Unique_Id__c = false;
        testOpps.add(opp2);
        
        Opportunity opp3 = new Opportunity(Name = 'Test Opp 3', Unique_Id__c = 'DL-2023.002',StageName='Negotiating', CloseDate= System.today()+30);
        opp3.Manually_Filled_Unique_Id__c = true;
        testOpps.add(opp3);
        
        insert testOpps;
        
        // Retrieve Opportunity records with their Unique_Id__c values
        Map<Id, Opportunity> oldMap = new Map<Id, Opportunity>([
            SELECT Id, Unique_Id__c,Manually_Filled_Unique_Id__c
            FROM Opportunity
            WHERE Id IN :testOpps
        ]);
        system.debug('Firstmap'+oldMap );
        // Call the handler method
        Test.startTest();
        Opportunity_Insert_UniqueId_Handler.insertUniqueIdMethod(testOpps, oldMap, true);
        Test.stopTest();
        
        // Verify that Unique Ids are correctly inserted
        for (Opportunity opp : testOpps) {
            if (!opp.Manually_Filled_Unique_Id__c && opp.Unique_Id__c == null) {
                System.assert(opp.Unique_Id__c != null, 'Unique Id should be inserted');
            }
        }
        
        // Verify that Unique Ids are unique
        Set<String> uniqueIds = new Set<String>();
        for (Opportunity opp : testOpps) {
            if (opp != null && opp.Unique_Id__c != null) {
                System.assert(!uniqueIds.contains(opp.Unique_Id__c), 'Duplicate Unique Id found');
                uniqueIds.add(opp.Unique_Id__c);
            }
        }
        
        // Verify the counter value
        for (Opportunity opp : testOpps) {
            if (!opp.Manually_Filled_Unique_Id__c && opp.Unique_Id__c != null) {
                
                String[] uniqueIdParts = opp.Unique_Id__c.split('\\.');
                system.debug('uniqueid@@@@@@>>>>'+uniqueIdParts );
                if (uniqueIdParts.size() == 3) {
                    Integer counter = Integer.valueOf(uniqueIdParts[3]);
                    Boolean isUniqueIdFound = false;
                    System.assert(counter >= 3, 'Counter value should be at least 1');
                }
            }
        }
    }
    
}
